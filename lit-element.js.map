{"version":3,"file":"lit-element.js","sourceRoot":"","sources":["src/lit-element.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport {\n  PropertiesChangedConstructor\n} from '@polymer/polymer/lib/mixins/properties-changed.js';\nimport {PropertiesMixin} from '@polymer/polymer/lib/mixins/properties-mixin.js';\nimport {\n  PropertiesMixinConstructor\n} from '@polymer/polymer/lib/mixins/properties-mixin.js';\nimport {camelToDashCase} from '@polymer/polymer/lib/utils/case-map.js';\nimport {render} from 'lit-html/lib/shady-render.js';\nimport {TemplateResult} from 'lit-html/lit-html.js';\n\nexport {\n  PropertiesChangedConstructor\n} from '@polymer/polymer/lib/mixins/properties-changed.js';\nexport {\n  PropertiesMixinConstructor\n} from '@polymer/polymer/lib/mixins/properties-mixin.js';\nexport {html} from 'lit-html/lib/lit-extended.js';\n\n// This is a hack to get tsc to not complain about unused interfaces and\n// still generate the type declarations properly\nexport type __unused = PropertiesChangedConstructor&PropertiesMixinConstructor;\n\n/**\n * Renders attributes to the given element based on the `attrInfo` object where\n * boolean values are added/removed as attributes.\n * @param element Element on which to set attributes.\n * @param attrInfo Object describing attributes.\n */\nexport function renderAttributes(element: HTMLElement, attrInfo: {[name: string]: any}) {\n  for (const a in attrInfo) {\n    const v = attrInfo[a] === true ? '' : attrInfo[a];\n    if (v || v === '' || v === 0) {\n      if (element.getAttribute(a) !== v) {\n        element.setAttribute(a, v);\n      }\n    } else if (element.hasAttribute(a)) {\n      element.removeAttribute(a);\n    }\n  }\n}\n\n/**\n * Returns a string of css class names formed by taking the properties\n * in the `classInfo` object and appending the property name to the string of\n * class names if the property value is truthy.\n * @param classInfo\n */\nexport function classString(classInfo: {[name: string]: any}) {\n  const o = [];\n  for (const name in classInfo) {\n    const v = classInfo[name];\n    if (v) {\n      o.push(name);\n    }\n  }\n  return o.join(' ');\n}\n\n/**\n * Returns a css style string formed by taking the properties in the `styleInfo`\n * object and appending the property name (dash-cased) colon the\n * property value. Properties are separated by a semi-colon.\n * @param styleInfo\n */\nexport function styleString(styleInfo: {[name: string]: any}) {\n  const o = [];\n  for (const name in styleInfo) {\n    const v = styleInfo[name];\n    if (v || v === 0) {\n      o.push(`${camelToDashCase(name)}: ${v}`);\n    }\n  }\n  return o.join('; ');\n}\n\nexport class LitElement extends PropertiesMixin\n(HTMLElement) {\n\n  private __renderComplete: Promise<any>|null = null;\n  private __resolveRenderComplete: Function|null = null;\n  private __isInvalid: Boolean = false;\n  private __isChanging: Boolean = false;\n  private _root?: Element|DocumentFragment;\n\n  ready() {\n    this._root = this._createRoot();\n    super.ready();\n  }\n\n  /**\n   * Returns an\n   * @returns {Element|DocumentFragment} Returns a node into which to render.\n   */\n  protected _createRoot(): Element|DocumentFragment {\n    return this.attachShadow({mode : 'open'});\n  }\n\n  /**\n   * Override which always returns true so that `_propertiesChanged`\n   * is called whenver properties are invalidated. This ensures `render`\n   * is always called in response to `invalidate`.\n   * @param _props Current element properties\n   * @param _changedProps Changing element properties\n   * @param _prevProps Previous element properties\n   * @returns {boolean} Default implementation always returns true.\n   */\n  _shouldPropertiesChange(_props: object, _changedProps: object, _prevProps: object) {\n    return true;\n  }\n\n  /**\n   * Override which always calls `render` and `didRender` to perform\n   * element rendering.\n   * @param props Current element properties\n   * @param changedProps Changing element properties\n   * @param prevProps Previous element properties\n   */\n  _propertiesChanged(props: object, changedProps: object, prevProps: object) {\n    this.__isChanging = true;\n    this.__isInvalid = false;\n    super._propertiesChanged(props, changedProps, prevProps);\n    const result = this.render(props);\n    if (result && this._root !== undefined) {\n      render(result, this._root!, this.localName!);\n    }\n    this.didRender(props, changedProps, prevProps);\n    if (this.__resolveRenderComplete) {\n      this.__resolveRenderComplete();\n    }\n    this.__isChanging = false;\n  }\n\n  _shouldPropertyChange(property: string, value: any, old: any) {\n    const change = super._shouldPropertyChange(property, value, old);\n    if (change && this.__isChanging) {\n      console.trace(\n          `Setting properties in response to other properties changing ` +\n          `considered harmful. Setting '${property}' from ` +\n          `'${this._getProperty(property)}' to '${value}'.`);\n    }\n    return change;\n  }\n\n  /**\n   * Returns a lit-html TemplateResult which is rendered into the element's\n   * shadowRoot. This method must be implemented.\n   * @param {*} _props Current element properties\n   * @returns {TemplateResult} Must return a lit-html TemplateResult.\n   */\n  protected render(_props: object): TemplateResult {\n    throw new Error('render() not implemented');\n  }\n\n  /**\n   * Called after element dom has been rendered. Implement to\n   * directly access element DOM.\n   * @param _props Current element properties\n   * @param _changedProps Changing element properties\n   * @param _prevProps Previous element properties\n   */\n  protected didRender(_props: object, _changedProps: object, _prevProps: object) {}\n\n  /**\n   * Provokes the element to asynchronously re-render.\n   */\n  invalidate() { this._invalidateProperties(); }\n\n  /**\n   * Override which provides tracking of invalidated state.\n   */\n  _invalidateProperties() {\n    this.__isInvalid = true;\n    super._invalidateProperties();\n  }\n\n  /**\n   * Returns a promise which resolves after the element next renders.\n   */\n  get renderComplete() {\n    if (!this.__renderComplete) {\n      // TODO(sorvell): handle rejected render.\n      this.__renderComplete = new Promise((resolve) => {\n        this.__resolveRenderComplete =\n            () => {\n              this.__resolveRenderComplete = this.__renderComplete = null;\n              resolve();\n            }\n      });\n      if (!this.__isInvalid && this.__resolveRenderComplete) {\n        this.__resolveRenderComplete();\n      }\n    }\n    return this.__renderComplete;\n  }\n}\n"]}